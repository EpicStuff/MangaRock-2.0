Old (for version 3.2.*)

Other:
	works loaded are stored as objects in both Work.all(as list) and format.all(as dictionary)
	formats and their properties can be customized in settings (not yet implemented)
	works can be sorted by whatever customized in settings
		example: {sort_by: 'star', stars: {one_star: 1, two_star: 2, three_star: 3}}
			the program will take the sort_by value and the dictionary with the name of sort_by + 's'

Loading stage:
	theme and font can be customized in settings
	lists files that end in .json
	label displays mode

	double click file to load it and proceed to mode
		double click off tree deselects everything

	type file's number to load file and proceed to mode
	type file name to load file and proceed to mode
		if entry is invalid nothing happens
	
	button to cycle mode between reading, adding(not yet implemented), and settings(not yet implemented)

Reading Mode (Part 1):
	lists loaded works
	eg: books will appear as children of series which will appear as children of author (not yet implemented)
	columns can be customized in settings, example
	clicking on "arrows" will show work's links

	double click work to "read" it, proceed to reading mode part 2
	double click off tree deselects everything and close all works

	enter work's corresponding number to "read" it, proceed to reading mode part 2

	if link was chosen "arrow" will mark which link (needs to be worked on)

	if button pressed will execute text in entry as code

Reading Mode (Part 2):
	work opens up to show links

	work gets selected even if user double clicks link instead of work
	if same work is (re)selected: update work.chapter to the latest chapter, return to reading mode part 1
	if same link is reselected: update work.chapter is set to the latest chapter from that link, return to reading mode part 1
	if different link from same work is selected: open the link selected
	double click off tree deselects everything, close all works, and return to reading mode part 1

	if 0 entered: update work.chapter to the latest chapter of previously selected option, return to reading mode part 1
	if float > 0 entered: set latest chapter to input, return to reading mode part 1
	if nothing is entered: deselect everything, close all works, and return to reading mode part 1
	if entered is gibberish: clear entry

	if button pressed will execute text in entry as code

Adding Mode:
	pass

Settings Mode:
	pass

Special Button Commands: (needs to be worked on)
	save - will save to loaded file
	exit - close program without saving
	update tree - "refresh" values of columns of nodes (not yet implemented)
	reupdate - update all works again
	back - will go back to loading stage (not yet implemented)

Note:
	version before 2.0 may exist but has been lost to time
	both version 2.8.11 and 3.0.16 will run
	version 3 has overhauled the GUI and all formats should be PascalCased
		upgrading .json files from before version 3 to after will require the user to manually capitalize the formats
		the file picture.json will work with version 2.8.10 while the file Manga.json will work with version 3.0.15
	parent works (eg: series, author, fandoms) are currently unsupported
	adding and settings functionality is currently unsupported thus you will have to manually create the .json files, add new works to the .json file, change settings in the .json5 file
	the following packages are required: requests, bs4, json5
	a python version of at least 3.10 is required
	the Manga, Anime, Text files provided are example files, create your own when using
	the Anime and Text files may crash the program as series are not yet supported